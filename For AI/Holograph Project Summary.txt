# Holograph Project Summary (2025 Edition)

## Overview
Holograph is a web-based end-of-life planning application that enables users to organize legal, financial, and digital estate plans in one place. Users can create a Holograph, a digital estate plan containing legal documents (wills, trusts), advanced health directives, and account transition instructions.

## Core Concepts
User Roles
1. Principals – Owners of a Holograph. They have full control, can manage content, add/remove users, and manage permissions.
2. Delegates – Appointed by Principals to manage the Holograph after the Principal’s passing. Delegates have read-only access, customized per section.

## Security Model
- Holograph Data Encryption: All text fields are encrypted using an SSL certificate unique to each **Holograph**.
- File Storage: Files are stored in Google Cloud Storage (GCS) using signed URLs and authenticated downloads.
- Authentication: Implemented via NextAuth.js. Only authorized users can view or manage Holographs.
- Delegate Permissions: Principals can set per-section access for Delegates (None or View-Only).

## Technology Stack
- Frontend: React.js (Next.js)
- Backend: Node.js with Prisma ORM
- Database: PostgreSQL (schema managed by Prisma)
- File Storage: Google Cloud Storage (GCS)
- Authentication: NextAuth.js
- Styling: Tailwind CSS
- Icons: react-icons (Lucide), react-icons/fi

## Key Features & Implementation
1. User Authentication
- Managed by NextAuth.js.
- Session management handled in /hooks/useHolograph.ts.

2. Holograph Management
- Users can create Holographs and invite others as Principals or Delegates.
- Owner field in each Holograph ensures traceable ownership (linked to billing and permissions).

Related Tables:
- Holograph
- HolographPrincipal
- HolographDelegate
- OwnershipAuditLog

API Routes:
- /api/holograph/create
- /api/holograph/[id]
- /api/holograph/principals
- /api/holograph/delegates

3. Document Management
- Users upload vital documents (e.g., wills, trusts, directives).
- Stored securely in GCS; only authorized users get access.

Model: VitalDocument
- Encrypted fields: name, notes
- GCS file path stored in filePath
- Enforced uniqueness: one filePath per Holograph

API:
- /api/vital-documents/
- /api/vital-documents/download

4. Invitations System
- Principals invite users to Holographs with a role (Principal or Delegate).
- Invitations are deleted when declined or after removal from the Holograph.

Model: Invitation
- Fields: holographId, inviterId, inviteeId, role, status
- Enforced uniqueness: one invite per user per Holograph

API Routes:
- /api/invitations?userId=xyz
- /api/invitations/[id]

5. Principal Removal Workflow
- Principals can remove themselves or request removal of another Principal.
- Owner cannot be removed.
- Non-owner removals require approval (Pending → Accept/Decline).

Model: PendingPrincipalRemoval
- Fields: holographId, targetUserId, requestedById, status
- Automatically deleted after Accept or Decline
- Invitations linked to the user are deleted after Accept

API Routes:
- POST /api/holograph/[id]/principals/remove
- PATCH /api/holograph/[id]/principals/remove/[removalId]

6. Delegate Permissions Per Section
- Sections are dynamically linked to Holographs.
- Principals set Delegate access per section.

Models:
- Section
- HolographSection
- DelegatePermissions

## Project File Structure (GitHub)
src/
├── app/
│   ├── dashboard/                     # User dashboard
│   │   └── user-profile/             # User profile management
│   ├── holographs/                   # Holograph detail pages
│   │   └── [id]/                     # Dynamic Holograph ID route
│   │       ├── manage-users/         # Manage Principals & Delegates
│   │       └── vital-documents/      # Manage Vital Documents per Holograph
│   └── api/                          # API Routes (RESTful)
│       ├── holograph/                # Holograph CRUD and user management
│       │   └── [id]/                 # Dynamic Holograph API routes
│       │       └── principals/remove/[removalId]/route.ts  # Accept/Decline removal
│       ├── invitations/              # Invitation handling
│       │   └── [id]/                 # Accept/Decline invitation
│       ├── vital-documents/         # Document CRUD and download
│       └── auth/                     # NextAuth routes
├── hooks/                            # Session and user context hooks
│   └── useHolograph.ts               # Custom hook for current Holograph/user
├── utils/                            # Helpers (debug, encryption)
├── lib/                              # Prisma db client, auth options
├── config/                           # Icon sets, constants
├── prisma/                           # Prisma schema file

## Next Development Priorities
1. Section Expansion: Add Financial Accounts, Digital Assets, etc.
2. Holograph Ownership Transfer: Ability to reassign Holograph owner.
3. Audit Logs: Track user actions for legal/logging integrity.
4. UI Enhancements: Finalize Help Dialog with AI support.
5. Security: Enforce per-Holograph SSL certs for text field encryption.

## Conclusion
Holograph is a scalable estate planning platform with dynamic user and permissions management, secure document handling, and a flexible section model. Its structure supports AI integrations, secure file handling, and dynamic user roles, while maintaining strict encryption and authentication standards per Holograph.

