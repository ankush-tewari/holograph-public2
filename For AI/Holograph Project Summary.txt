# Holograph Project Summary (2025 Edition)

## Overview
Holograph is a web-based application designed to assist users in comprehensive end-of-life planning. It enables individuals to securely store and manage essential documents such as wills, trusts, advanced health directives, and instructions for handling various accounts and subscriptions. The platform ensures that all sensitive data is encrypted using unique SSL certificates for each user, maintaining the highest level of security.

## Core Concepts

### User Roles
1. **Principals**: Individuals who create and own a Holograph. They have full control over its content and can manage user access and permissions.
2. **Delegates**: Appointed by Principals to manage the Holograph after the Principal's passing. Delegates have read-only access, with permissions customizable per section.

### Holograph Structure
- **Principals**: Users with full control over the Holograph.
- **Delegate**: The person designated to manage the estate after the Principal's passing.

## Security Model
- **Data Encryption**: All user data is encrypted with a unique SSL certificate per user, ensuring that both database entries and uploaded files are securely protected.
- **File Storage**: Files are stored in Google Cloud Storage (GCS) and encrypted using the user's unique encryption key.
- **Authentication**: Implemented via NextAuth.js, ensuring that only authorized users can access or manage Holographs.
- **Delegate Permissions**: Principals can set per-section access for Delegates, determining whether they have no access or view-only rights.

## Technology Stack
- **Frontend**: React.js (Next.js)
- **Backend**: Node.js with Prisma ORM
- **Database**: PostgreSQL
- **File Storage**: Google Cloud Storage (GCS)
- **Authentication**: NextAuth.js
- **Styling**: Tailwind CSS
- **Icons**: react-icons (Lucide), react-icons/fi

## Project Directory Structure

```
holograph-public2/
├── For AI/                             # Directory containing AI-related context files
│   ├── Context for AI.txt              # Text file providing context for AI integration
│   └── Project_Directory_Structure.txt # Text file detailing the project's directory structure
├── prisma/                             # Directory for Prisma schema and migrations
├── public/                             # Public assets directory
├── src/                                # Source code directory
│   ├── app/                            # Main application directory
│   │   ├── (auth)/                     # Authentication-related pages
│   │   ├── api/                        # API routes
│   │   │   ├── auth/                   # Authentication API routes
│   │   │   ├── financial-accounts/     # Financial accounts API routes
│   │   │   ├── holograph/              # Holograph CRUD and user management API routes
│   │   │   ├── invitations/            # Invitation handling API routes
│   │   │   ├── vital-documents/        # Vital documents API routes
│   │   │   └── route.ts                # API route definitions
│   │   ├── dashboard/                  # User dashboard pages
│   │   │   └── user-profile/           # User profile management pages
│   │   ├── holographs/                 # Holograph detail pages
│   │   │   ├── [id]/                   # Dynamic Holograph ID route
│   │   │   │   ├── manage-users/       # Manage Principals & Delegates pages
│   │   │   │   ├── vital-documents/    # Manage Vital Documents per Holograph pages
│   │   │   │   └── financial-accounts/ # Manage Financial Accounts per Holograph pages
│   │   │   └── page.tsx                # Holographs page component
│   │   ├── layout.tsx                  # Main layout component
│   │   ├── page.tsx                    # Main page component
│   │   └── route.ts                    # Route definitions
│   ├── components/                     # Shared React components
│   │   ├── financial-accounts/         # Financial accounts components
│   │   │   ├── FinancialAccountModal.tsx # Modal for adding/editing financial accounts
│   │   │   └── FinancialAccountTable.tsx # Table displaying financial accounts
│   │   ├── vital-documents/            # Vital documents components
│   │   │   ├── VitalDocumentModal.tsx  # Modal for adding/editing vital documents
│   │   │   └── VitalDocumentTable.tsx  # Table displaying vital documents
│   │   ├── forms/                      # Form components
│   │   ├── ui/                         # UI components (buttons, modals, etc.)
│   │   └── layout/                     # Layout components
│   ├── config/                         # Configuration files
│   │   ├── financialAccountType.ts     # Financial account types configuration
│   │   ├── icons.ts                    # Icon configurations
│   │   └── site.ts                     # Site-wide configurations
│   ├── hooks/                          # Custom React hooks
│   │   ├── useHolograph.ts             # Hook for accessing Holograph data
│   │   └── useSectionAccess.ts         # Hook for section access control
│   ├── lib/                            # Library utilities
│   │   ├── auth.ts                     # Authentication utilities
│   │   ├── db.ts                       # Database utilities
│   │   ├── encryption.ts               # Encryption utilities
│   │   ├── logger.ts                   # Logging utilities
│   │   └── utils.ts                    # General utilities
│   ├── styles/                         # Global styles
│   │   ├── globals.css                 # Global CSS styles
│   │   └── tailwind.css                # Tailwind CSS styles
│   ├── types/                          # TypeScript type definitions
│   └── utils/                          # Helper functions
│       ├── debug.ts                    # Debugging utilities
│       ├── encryption.ts               # Encryption helper functions
│       └── helpers.ts                  # General helper functions
├── .gitignore                          # Git ignore file
├── README.md                           # Project README file
├── eslint.config.mjs                   # ESLint configuration
├── next.config.ts                      # Next.js configuration
├── package-lock.json                   # Package lock file
├── package.json                        # Package configuration file
├── postcss.config.js                   # PostCSS configuration
├── tailwind.config.ts                  # Tailwind CSS configuration
└── tsconfig.json                       # TypeScript configuration
```

This directory structure provides an up-to-date reference for the Holograph project, ensuring consistency across development and deployment processes.