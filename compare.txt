"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import axios from "axios";
import VitalDocumentModal from "../../../_components/vital-documents/VitalDocumentModal";
import { DOCUMENT_TYPES } from "../../../../config/documentType";
import { useSession } from "next-auth/react";
import { useHolograph } from "../../../../hooks/useHolograph";
import { FiLink, FiEdit, FiTrash2 } from "react-icons/fi";

export default function VitalDocumentsPage() {
  const params = useParams();
  const router = useRouter();
  const { data: session, status } = useSession();
  const { currentHolographId, holographTitle, userId, isAuthenticated, isLoading: isHolographLoading } = useHolograph();
  
  const holographId = params.id as string;

  const [documents, setDocuments] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedDocument, setSelectedDocument] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [signedUrls, setSignedUrls] = useState({});

  useEffect(() => {
    if (status === "unauthenticated") router.push("/login");
  }, [status, router]);

  useEffect(() => {
    async function fetchDocuments() {
      if (!holographId || !userId) return;
      try {
        const response = await axios.get(`/api/vital-documents?holographId=${holographId}`, { withCredentials: true });
        setDocuments(response.data);
      } catch (error) {
        console.error("Error loading documents:", error);
      } finally {
        setIsLoading(false);
      }
    }
    fetchDocuments();
  }, [holographId, userId]);

  const openModal = (document = null) => {
    setSelectedDocument(document);
    setIsModalOpen(true);
  };
  
  const closeModal = () => setIsModalOpen(false);

  const handleDelete = async (documentId) => {
    if (!confirm("Are you sure you want to delete this document?")) return;
    try {
      await axios.delete(`/api/vital-documents/${documentId}`);
      setDocuments((prevDocs) => prevDocs.filter((doc) => doc.id !== documentId));
    } catch (error) {
      console.error("Error deleting document:", error);
    }
  };

  return (
    <div className="flex gap-6 p-8 max-w-6xl mx-auto">
      {/* Left Section: Controls & Instructions */}
      <div className="w-1/3 bg-white shadow-lg p-6 rounded-lg">
        <h1 className="text-2xl font-bold text-gray-800">{holographTitle}</h1>
        <div className="mt-4 flex flex-col gap-4">
          <button className="btn-primary" onClick={() => openModal(null)}>+ Add New Vital Document</button>
          <button className="btn-secondary" onClick={() => router.push(`/holographs/${holographId}`)}>‚Üê Back to Holograph</button>
        </div>
        <div className="mt-6 text-gray-700 text-sm space-y-2">
          <p>Upload a scanned copy of your will, advance healthcare directive, and at least one identity document.</p>
          <p>You may also upload other important documents such as:</p>
          <ul className="list-disc pl-4">
            <li>Pet information</li>
            <li>Location of important heirlooms</li>
            <li>Other transition-related instructions</li>
          </ul>
        </div>
      </div>
      
      {/* Right Section: Document Table */}
      <div className="w-2/3 bg-white shadow-lg p-6 rounded-lg">
        <h2 className="text-xl font-semibold text-gray-800">Vital Documents</h2>
        {isLoading ? (
          <p className="text-gray-600">Loading...</p>
        ) : documents.length === 0 ? (
          <p className="text-gray-500">No documents added yet.</p>
        ) : (
          <table className="w-full mt-4 border-collapse border border-gray-300">
            <thead>
              <tr className="bg-gray-100">
                <th className="p-3 border border-gray-300">Document Name</th>
                <th className="p-3 border border-gray-300">Type</th>
                <th className="p-3 border border-gray-300">Actions</th>
              </tr>
            </thead>
            <tbody>
              {documents.map((doc) => (
                <tr key={doc.id} className="border-t">
                  <td className="p-3 border border-gray-300">{doc.name}</td>
                  <td className="p-3 border border-gray-300">{DOCUMENT_TYPES.vitalDocuments.find((d) => d.value === doc.type)?.label || doc.type}</td>
                  <td className="p-3 border border-gray-300 flex gap-3">
                    <a href={signedUrls[doc.id] || "#"} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:text-blue-800">
                      <FiLink size={18} />
                    </a>
                    <button onClick={() => openModal(doc)} className="text-yellow-600 hover:text-yellow-800">
                      <FiEdit size={18} />
                    </button>
                    <button onClick={() => handleDelete(doc.id)} className="text-red-600 hover:text-red-800">
                      <FiTrash2 size={18} />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
      
      {isModalOpen && (
        <VitalDocumentModal 
          userId={userId} 
          document={selectedDocument} 
          holographId={holographId} 
          onClose={closeModal} 
          onSuccess={() => location.reload()}
        />
      )}
    </div>
  );
}
