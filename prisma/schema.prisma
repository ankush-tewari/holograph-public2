generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id @default(uuid())
  email           String               @unique
  password        String
  name            String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  delegateAccess  HolographDelegate[]
  principalOf     HolographPrincipal[]
  invitationsSent Invitation[]         @relation("Inviter")
}

model Holograph {
  id             String               @id @default(uuid())
  title          String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  delegates      HolographDelegate[]
  principals     HolographPrincipal[]
  vitalDocuments VitalDocument[] // New relation
  Invitation     Invitation[]
}

model HolographPrincipal {
  id          String    @id @default(uuid())
  holographId String
  userId      String
  addedAt     DateTime  @default(now())
  holograph   Holograph @relation(fields: [holographId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([holographId, userId])
}

model HolographDelegate {
  id          String    @id @default(uuid())
  holographId String
  userId      String
  assignedAt  DateTime  @default(now())
  holograph   Holograph @relation(fields: [holographId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([holographId, userId])
}

model VitalDocument {
  id          String    @id @default(uuid())
  holographId String
  name        String    // Name of the document
  type        String    // Stores "will", "trust", "ahd", "other" 
  filePath    String    // Path or URL to the uploaded file
  uploadedBy  String    // User ID of the uploader
  notes       String?   @db.Text // âœ… Add this as a new column with long text support
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  holograph   Holograph @relation(fields: [holographId], references: [id])

  @@unique([holographId, filePath])  // Enforce uniqueness within each Holograph
}



model Invitation {
  id           String   @id @default(uuid()) // Unique ID for the invitation
  holographId  String // The Holograph being shared
  inviterId    String // The user who sent the invite
  inviteeEmail String // The email of the person invited
  role         String // Either "Principal" or "Delegate"
  status       String   @default("Pending") // Can be "Pending", "Accepted", or "Declined"
  createdAt    DateTime @default(now()) // Timestamp of when the invite was created

  // Relations
  holograph Holograph @relation(fields: [holographId], references: [id])
  inviter   User      @relation(fields: [inviterId], references: [id], name: "Inviter")

  @@unique([holographId, inviteeEmail]) // Ensure one invitation per user per Holograph
}
