generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String
  firstName          String
  lastName           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  // üîê Payment fields
  stripeCustomerId   String?
  subscriptionStatus String?

  delegateAccess HolographDelegate[]
  principalOf    HolographPrincipal[]

  invitationsSent     Invitation[] @relation("Inviter")
  invitationsReceived Invitation[] @relation("Invitee")

  delegatePermissions DelegatePermissions[]

  // üîΩ Corrected back-relations
  ownedHolographs  Holograph[]         @relation("HolographOwner")
  oldOwnedLogs     OwnershipAuditLog[] @relation("OldOwnerRelation")
  currentOwnedLogs OwnershipAuditLog[] @relation("CurrentOwnerRelation") // ‚úÖ Renamed from newOwnedLogs
}

model Holograph {
  id                  String                @id @default(uuid())
  title               String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sslCertPath         String?
  sslKeyPath          String?
  delegates           HolographDelegate[]
  principals          HolographPrincipal[]
  vitalDocuments      VitalDocument[]
  invitations         Invitation[]
  sections            HolographSection[]
  delegatePermissions DelegatePermissions[]

  // üîΩ Ownership (required again)
  ownerId            String
  owner              User                @relation("HolographOwner", fields: [ownerId], references: [id])
  ownershipAuditLogs OwnershipAuditLog[]
}

// establishes an owner for the holograph who is responsible for payment
model OwnershipAuditLog {
  id             String   @id @default(uuid())
  holographId    String
  oldOwnerId     String? // Optional for first ownership, required for transfers (enforced in app logic)
  currentOwnerId String
  changedAt      DateTime @default(now())

  holograph    Holograph @relation(fields: [holographId], references: [id])
  oldOwner     User?     @relation("OldOwnerRelation", fields: [oldOwnerId], references: [id])
  currentOwner User      @relation("CurrentOwnerRelation", fields: [currentOwnerId], references: [id])
}

model HolographPrincipal {
  id          String    @id @default(uuid())
  holographId String
  userId      String
  addedAt     DateTime  @default(now())
  holograph   Holograph @relation(fields: [holographId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([holographId, userId])
}

model HolographDelegate {
  id          String    @id @default(uuid())
  holographId String
  userId      String
  assignedAt  DateTime  @default(now())
  holograph   Holograph @relation(fields: [holographId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([holographId, userId])
}

model VitalDocument {
  id          String    @id @default(uuid())
  holographId String
  name        String // Encrypted name of the document
  type        String // Will, Trust, Advanced Health Directive, etc.
  filePath    String // Path to the uploaded file
  uploadedBy  String // User ID of the uploader
  notes       String?   @db.Text // Encrypted notes (long text support)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  holograph   Holograph @relation(fields: [holographId], references: [id])

  @@unique([holographId, filePath]) // Ensure unique filenames within each Holograph
}

model Invitation {
  id          String   @id @default(uuid())
  holographId String
  inviterId   String
  inviteeId   String // ‚úÖ New field for user ID instead of email
  role        String
  status      String   @default("Pending")
  createdAt   DateTime @default(now())

  holograph Holograph @relation(fields: [holographId], references: [id])
  inviter   User      @relation(fields: [inviterId], references: [id], name: "Inviter")
  invitee   User      @relation(fields: [inviteeId], references: [id], name: "Invitee") // ‚úÖ New relation

  @@unique([holographId, inviteeId]) // Updated to use inviteeId
}

// Table for Holograph sections so they can be added dynamically
model Section {
  id          String             @id @default(uuid())
  name        String             @unique // "Financial Accounts"
  slug        String             @unique // "financial_accounts"
  description String? // Explanation of the section
  iconSlug    String? // Matches a key in the `icons.ts` file
  isDefault   Boolean            @default(true) // Determines if it's a default section
  createdAt   DateTime           @default(now())
  order       Int                @default(0) // ‚úÖ Controls display order
  holographs  HolographSection[] // ‚úÖ Add this to establish the relation
}

// ties Sections to Holographs
model HolographSection {
  id          String @id @default(uuid())
  holographId String
  sectionId   String
  order       Int    @default(0) // ‚úÖ Controls layout order per Holograph

  holograph           Holograph             @relation(fields: [holographId], references: [id])
  section             Section               @relation(fields: [sectionId], references: [id])
  delegatePermissions DelegatePermissions[] // ‚úÖ Added relation back to DelegatePermissions

  @@unique([holographId, sectionId]) // Prevent duplicate entries
}

// Determines what access level Delegates have to each Holograph Section
model DelegatePermissions {
  id          String @id @default(uuid())
  holographId String
  delegateId  String
  sectionId   String // ‚úÖ Foreign key to HolographSection
  accessLevel String // "none" or "view-only"

  holograph Holograph        @relation(fields: [holographId], references: [id], onDelete: Cascade)
  delegate  User             @relation(fields: [delegateId], references: [id], onDelete: Cascade)
  section   HolographSection @relation(fields: [sectionId], references: [id], onDelete: Cascade) // ‚úÖ Added relation

  @@unique([holographId, delegateId, sectionId]) // Ensure one entry per section per delegate
}
