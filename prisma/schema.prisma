generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  password            String
  name                String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  delegateAccess      HolographDelegate[]
  principalOf         HolographPrincipal[]
  invitationsSent     Invitation[]          @relation("Inviter")
  delegatePermissions DelegatePermissions[] // ✅ Add this line
}

model Holograph {
  id                  String                @id @default(uuid())
  title               String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sslCertPath         String? // Path to SSL cert in GCS (optional)
  sslKeyPath          String? // Path to SSL key in GCS (optional)
  delegates           HolographDelegate[]
  principals          HolographPrincipal[]
  vitalDocuments      VitalDocument[]
  invitations         Invitation[] // ✅ Add this to establish the relation
  sections            HolographSection[] // ✅ Add this to establish the relation
  delegatePermissions DelegatePermissions[] // ✅ Add this line
}

model HolographPrincipal {
  id          String    @id @default(uuid())
  holographId String
  userId      String
  addedAt     DateTime  @default(now())
  holograph   Holograph @relation(fields: [holographId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([holographId, userId])
}

model HolographDelegate {
  id          String    @id @default(uuid())
  holographId String
  userId      String
  assignedAt  DateTime  @default(now())
  holograph   Holograph @relation(fields: [holographId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([holographId, userId])
}

model VitalDocument {
  id          String    @id @default(uuid())
  holographId String
  name        String // Encrypted name of the document
  type        String // Will, Trust, Advanced Health Directive, etc.
  filePath    String // Path to the uploaded file
  uploadedBy  String // User ID of the uploader
  notes       String?   @db.Text // Encrypted notes (long text support)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  holograph   Holograph @relation(fields: [holographId], references: [id])

  @@unique([holographId, filePath]) // Ensure unique filenames within each Holograph
}

model Invitation {
  id           String   @id @default(uuid()) // Unique ID for the invitation
  holographId  String // The Holograph being shared
  inviterId    String // The user who sent the invite
  inviteeEmail String // The email of the person invited
  role         String // Either "Principal" or "Delegate"
  status       String   @default("Pending") // Can be "Pending", "Accepted", or "Declined"
  createdAt    DateTime @default(now()) // Timestamp of when the invite was created

  // Relations
  holograph Holograph @relation(fields: [holographId], references: [id])
  inviter   User      @relation(fields: [inviterId], references: [id], name: "Inviter")

  @@unique([holographId, inviteeEmail]) // Ensure one invitation per user per Holograph
}

// Table for Holograph sections so they can be added dynamically
model Section {
  id          String             @id @default(uuid())
  name        String             @unique // "Financial Accounts"
  slug        String             @unique // "financial_accounts"
  description String? // Explanation of the section
  iconSlug    String? // Matches a key in the `icons.ts` file
  isDefault   Boolean            @default(true) // Determines if it's a default section
  createdAt   DateTime           @default(now())
  order       Int                @default(0) // ✅ Controls display order
  holographs  HolographSection[] // ✅ Add this to establish the relation
}

// ties Sections to Holographs
model HolographSection {
  id          String @id @default(uuid())
  holographId String
  sectionId   String
  order       Int    @default(0) // ✅ Controls layout order per Holograph

  holograph Holograph @relation(fields: [holographId], references: [id])
  section   Section   @relation(fields: [sectionId], references: [id])
  delegatePermissions DelegatePermissions[] // ✅ Added relation back to DelegatePermissions
  
  @@unique([holographId, sectionId]) // Prevent duplicate entries
}

// Determines what access level Delegates have to each Holograph Section
model DelegatePermissions {
  id          String @id @default(uuid())
  holographId String
  delegateId  String
  sectionId   String  // ✅ Foreign key to HolographSection
  accessLevel String  // "none" or "view-only"

  holograph   Holograph        @relation(fields: [holographId], references: [id], onDelete: Cascade)
  delegate    User             @relation(fields: [delegateId], references: [id], onDelete: Cascade)
  section     HolographSection @relation(fields: [sectionId], references: [id], onDelete: Cascade) // ✅ Added relation

  @@unique([holographId, delegateId, sectionId]) // Ensure one entry per section per delegate
}
